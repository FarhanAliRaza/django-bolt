# Auto-generated by django-bolt types. Do not edit manually.

from __future__ import annotations
from typing import Optional
from django_bolt.typecheck import TypedQuerySet, TypedManager
import datetime
from django.db.models import Model

class BenchItem(Model):
    id: int
    name: str
    value: int
    description: str
    is_active: bool
    created_at: datetime.datetime
    updated_at: datetime.datetime
    objects: BenchItemManager
    def save(self, force_insert: bool = ..., force_update: bool = ..., using: str | None = ..., update_fields: list[str] | None = ...) -> None: ...
    def delete(self, using: str | None = ...) -> tuple[int, dict[str, int]]: ...
    def refresh_from_db(self, using: str | None = ..., fields: list[str] | None = ...) -> None: ...
    async def asave(self, force_insert: bool = ..., force_update: bool = ..., using: str | None = ..., update_fields: list[str] | None = ...) -> None: ...
    async def adelete(self, using: str | None = ...) -> tuple[int, dict[str, int]]: ...
    async def arefresh_from_db(self, using: str | None = ..., fields: list[str] | None = ...) -> None: ...

class BenchItemQuerySet(TypedQuerySet[BenchItem]):
    def filter(self, *, id: Optional[int] = ..., pk: Optional[int] = ..., name: Optional[str] = ..., value: Optional[int] = ..., description: Optional[str] = ..., is_active: Optional[bool] = ..., created_at: Optional[datetime.datetime] = ..., updated_at: Optional[datetime.datetime] = ...) -> BenchItemQuerySet: ...
    def exclude(self, *, id: Optional[int] = ..., pk: Optional[int] = ..., name: Optional[str] = ..., value: Optional[int] = ..., description: Optional[str] = ..., is_active: Optional[bool] = ..., created_at: Optional[datetime.datetime] = ..., updated_at: Optional[datetime.datetime] = ...) -> BenchItemQuerySet: ...
    def get(self, *, id: Optional[int] = ..., pk: Optional[int] = ..., name: Optional[str] = ..., value: Optional[int] = ..., description: Optional[str] = ..., is_active: Optional[bool] = ..., created_at: Optional[datetime.datetime] = ..., updated_at: Optional[datetime.datetime] = ...) -> BenchItem: ...
    def only(self, *fields: str) -> BenchItemQuerySet: ...
    def values(self, *fields: str) -> list[dict[str, object]]: ...
    def values_list(self, *fields: str, flat: bool = ...) -> list[object] | list[tuple[object, ...]]: ...
    def update(self, *, id: int = ..., name: str = ..., value: int = ..., description: str = ..., is_active: bool = ..., created_at: datetime.datetime = ..., updated_at: datetime.datetime = ...) -> int: ...
    def delete(self) -> tuple[int, dict[str, int]]: ...
    def order_by(self, *fields: str) -> BenchItemQuerySet: ...
    def distinct(self, *fields: str) -> BenchItemQuerySet: ...
    def select_related(self, *fields: str) -> BenchItemQuerySet: ...
    def prefetch_related(self, *fields: str) -> BenchItemQuerySet: ...
    async def aget(self, *, id: Optional[int] = ..., pk: Optional[int] = ..., name: Optional[str] = ..., value: Optional[int] = ..., description: Optional[str] = ..., is_active: Optional[bool] = ..., created_at: Optional[datetime.datetime] = ..., updated_at: Optional[datetime.datetime] = ...) -> BenchItem: ...
    async def acreate(self, **kwargs) -> BenchItem: ...
    async def aupdate(self, *, id: int = ..., name: str = ..., value: int = ..., description: str = ..., is_active: bool = ..., created_at: datetime.datetime = ..., updated_at: datetime.datetime = ...) -> int: ...
    async def adelete(self) -> tuple[int, dict[str, int]]: ...
    async def afirst(self) -> BenchItem | None: ...
    async def alast(self) -> BenchItem | None: ...
    async def acount(self) -> int: ...
    async def aexists(self) -> bool: ...

class BenchItemManager(TypedManager[BenchItem]):
    def filter(self, *, id: Optional[int] = ..., pk: Optional[int] = ..., name: Optional[str] = ..., value: Optional[int] = ..., description: Optional[str] = ..., is_active: Optional[bool] = ..., created_at: Optional[datetime.datetime] = ..., updated_at: Optional[datetime.datetime] = ...) -> BenchItemQuerySet: ...
    def exclude(self, *, id: Optional[int] = ..., pk: Optional[int] = ..., name: Optional[str] = ..., value: Optional[int] = ..., description: Optional[str] = ..., is_active: Optional[bool] = ..., created_at: Optional[datetime.datetime] = ..., updated_at: Optional[datetime.datetime] = ...) -> BenchItemQuerySet: ...
    def get(self, *, id: Optional[int] = ..., pk: Optional[int] = ..., name: Optional[str] = ..., value: Optional[int] = ..., description: Optional[str] = ..., is_active: Optional[bool] = ..., created_at: Optional[datetime.datetime] = ..., updated_at: Optional[datetime.datetime] = ...) -> BenchItem: ...
    def only(self, *fields: str) -> BenchItemQuerySet: ...
    def values(self, *fields: str) -> list[dict[str, object]]: ...
    def values_list(self, *fields: str, flat: bool = ...) -> list[object] | list[tuple[object, ...]]: ...
    async def aget(self, *, id: Optional[int] = ..., pk: Optional[int] = ..., name: Optional[str] = ..., value: Optional[int] = ..., description: Optional[str] = ..., is_active: Optional[bool] = ..., created_at: Optional[datetime.datetime] = ..., updated_at: Optional[datetime.datetime] = ...) -> BenchItem: ...
    async def acreate(self, **kwargs) -> BenchItem: ...
    async def aget_or_create(self, **kwargs) -> tuple[BenchItem, bool]: ...
    async def aupdate_or_create(self, **kwargs) -> tuple[BenchItem, bool]: ...
    async def abulk_create(self, objs: list[BenchItem], **kwargs) -> list[BenchItem]: ...
    async def abulk_update(self, objs: list[BenchItem], fields: list[str], **kwargs) -> int: ...
    async def acount(self) -> int: ...
    async def afirst(self) -> BenchItem | None: ...
    async def alast(self) -> BenchItem | None: ...
    async def aexists(self) -> bool: ...

