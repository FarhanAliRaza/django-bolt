# Auto-generated by django-bolt types. Do not edit manually.

from __future__ import annotations
from typing import Optional
from django_bolt.typecheck import TypedQuerySet, TypedManager
from django.db.models import Model

class LogEntry(Model):
    action_time: datetime.datetime
    user: int
    content_type: Optional[int]
    object_id: Optional[str]
    object_repr: str
    action_flag: Any
    change_message: str
    objects: LogEntryManager

class LogEntryQuerySet(TypedQuerySet[LogEntry]):
    def filter(self, *, action_time: Optional[datetime.datetime] = ..., user: Optional[int] = ..., user_id: Optional[int] = ..., content_type: Optional[int] = ..., content_type_id: Optional[int] = ..., object_id: Optional[str] = ..., object_repr: Optional[str] = ..., action_flag: Optional[Any] = ..., change_message: Optional[str] = ...) -> LogEntryQuerySet: ...
    def exclude(self, *, action_time: Optional[datetime.datetime] = ..., user: Optional[int] = ..., user_id: Optional[int] = ..., content_type: Optional[int] = ..., content_type_id: Optional[int] = ..., object_id: Optional[str] = ..., object_repr: Optional[str] = ..., action_flag: Optional[Any] = ..., change_message: Optional[str] = ...) -> LogEntryQuerySet: ...
    def get(self, *, action_time: Optional[datetime.datetime] = ..., user: Optional[int] = ..., user_id: Optional[int] = ..., content_type: Optional[int] = ..., content_type_id: Optional[int] = ..., object_id: Optional[str] = ..., object_repr: Optional[str] = ..., action_flag: Optional[Any] = ..., change_message: Optional[str] = ...) -> LogEntry: ...

class LogEntryManager(TypedManager[LogEntry]):
    def filter(self, *, action_time: Optional[datetime.datetime] = ..., user: Optional[int] = ..., user_id: Optional[int] = ..., content_type: Optional[int] = ..., content_type_id: Optional[int] = ..., object_id: Optional[str] = ..., object_repr: Optional[str] = ..., action_flag: Optional[Any] = ..., change_message: Optional[str] = ...) -> LogEntryQuerySet: ...
    def exclude(self, *, action_time: Optional[datetime.datetime] = ..., user: Optional[int] = ..., user_id: Optional[int] = ..., content_type: Optional[int] = ..., content_type_id: Optional[int] = ..., object_id: Optional[str] = ..., object_repr: Optional[str] = ..., action_flag: Optional[Any] = ..., change_message: Optional[str] = ...) -> LogEntryQuerySet: ...
    def get(self, *, action_time: Optional[datetime.datetime] = ..., user: Optional[int] = ..., user_id: Optional[int] = ..., content_type: Optional[int] = ..., content_type_id: Optional[int] = ..., object_id: Optional[str] = ..., object_repr: Optional[str] = ..., action_flag: Optional[Any] = ..., change_message: Optional[str] = ...) -> LogEntry: ...

